#include <bits/stdc++.h>
#define ll long long
#define ld long double
#define fs first
#define sc second
using namespace std;
const ll N = 700 + 6;
const ll Log2 = 19;
const ll inf = 1e9 + 7;
typedef pair<ll,ll> LL;
ll n,h[N][N],v[N][N],lab[N*N],ans = 1;
ll dx[4] = {1,0};
ll dy[4] = {0,1};
vector<LL> D;
bool chk(ll x,ll y){
    return x > 0&&y > 0&&x <= n&&y <= n;
}

ll Trans(ll x,ll y){
    return (x - 1)*n + y;
}

struct Node{
    ll x,y,u,v;
    ld cond;
};
vector<Node> V;
bool lf(Node x,Node y){
    return x.cond < y.cond;
}

ll Find(ll u){
    if (lab[u] < 0) return u;
    return Find(lab[u]);
}

void rollback(ll now){
    while(D.size() > now){
        lab[D.back().fs] = D.back().sc;
        D.pop_back();
    }
}

void Union(ll p,ll q){
    ll r = Find(p),s = Find(q);
    if (r == s) return;
    if (lab[r] > lab[s]) swap(r,s);
    D.push_back({r,lab[r]});
    D.push_back({s,lab[s]});
    lab[r] += lab[s]; lab[s] = r; ans = max(ans,abs(lab[r]));
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0), cout.tie(0);
    #define task "tst"
    if (fopen(task".inp", "r")){
        freopen(task".inp", "r", stdin);
        freopen(task".out", "w", stdout);
    }
    cin>>n; memset(lab,-1,sizeof(lab));
    for (ll i = 1;i <= n;i++){
        for (ll j = 1;j <= n;j++) cin>>h[i][j];
    }
    for (ll i = 1;i <= n;i++){
        for (ll j = 1;j <= n;j++) cin>>v[i][j];
    }
    for (ll i = 1;i <= n;i++){
        for (ll j = 1;j <= n;j++){
            for (ll l = 0;l < 2;l++){
                ll x = i + dx[l],y = j + dy[l];
                if (chk(x,y)){
                    ll kq1 = h[x][y] - h[i][j],kq2 = v[i][j] - v[x][y];
                    //cout<<i<<" "<<j<<" "<<x<<" " <<y<<"   "<<kq1<<" "<<kq2<<"\n";
                    if (!kq1 && !kq2){
                        ll p = Trans(x,y),q = Trans(i,j);
                        Union(p,q); continue;
                    }
                    if (kq1 != kq2 && !kq2) continue;
                    if (kq1*kq2 < 0) continue;
                    V.push_back({x,y,i,j,(ld) kq1/(ld) kq2});
                }
            }
        }
    }
    sort(V.begin(),V.end(),lf); //return 0;
    ll now = D.size();
    for (ll i = 0;i < V.size();){
        ll j = i + 1;
        while(j < V.size() && V[j].cond == V[i].cond) j++;
        //cout<<i<<" "<<j - 1; exit(0);
        for (ll l = i;l < j;l++){
            Node now = V[l];
            ll p = Trans(now.x,now.y),q = Trans(now.u,now.v);
            Union(p,q); //cout<<ans; exit(0);
        }
        rollback(now);

        i = j;
    }
    cout<<ans;
}
